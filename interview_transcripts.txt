Interview Transcripts:
Software Tester 1:
Select User Story
1) Read issue title, look at priority queue in GitLab (not
always sorted), discuss with PO’s.
2) Small bug fixes, textual changes, basically determine low-
risk low impact issues and skip them.
Transform User Story into Test Cases
1) Yes, I call the basic flow the happy path.
2) It highly depends, bigger issues have more alternative
flows and therewith abnormal ones
3) Again, this depends. Customer expectations, available
budgets, used hours on an estimate, and the likelihood of
breaking. Also, input validation is easy to automatically
test, i.e. it also depends on what ”should you test” means
(manual or automatic).
4) I choose data inputs using all of these methods (Random,
Usage-based, Boundary, Partition)
Implement Test Cases
1) I use Cypress but Selenium also works similarly
Software Tester 2:
Select User Story
1) Check the product backlog, choose the one with high
priority, it is usually not very difficult to determine
2) Indeed, user stories that are tested in unit tests can be
skipped
Transform User Story into Test Cases
1) Yes, my definition for alternate/abnormal flows: abnormal
flows are flows that will not likely be used by end-users,
alternative flows are flows that are likely to be used apart
from the regular flow
2) Depends on the functionality you are testing. The 80/20
principle usually does apply though
3) for end-to-end tests, the broader use-case scenarios which
involve both the front-end and back-end, so that big
features or flows can be tested well
4) Usage-based Testing could be considered the most com-
monly used option as the choice of data inputs depends
on the feature being tested
Implement Test Cases
1) Yes, These are the easiest options to implement end-to-
end tests.
Software Tester 3:
Select User Story
1) The product owner can help choose the most important
one, but on GitLab also you can find the most important
user stories for the sprint
2) Bug fixes and maybe small changes in the front end can
be avoided
Transform User Story into Test Cases
1) Yes, the basic workflow should be recognized and the
alternate flows.
2) Depends on the user story you are testing, the bigger
functionalities will have more alternate flows
3) This depends on the budget and what is required really
4) All options are usable and it depends on what you are
testing, but Boundary Testing is a good technique to test
both positive and negative scenarios.
Implement Test Cases
1) Yes, these are the ones which are most used, the other
ones as you mentioned like Visual locators cannot be
always used like for big web apps
